/*

By Abdullahi Farah

Problem 2:
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

*/

public class Problem2 {
	public static void main(String[] args){
		Problem2 test = new Problem2();
		long startTime1 = System.nanoTime();
		test.solve();
		long endTime1 = System.nanoTime();
		long duration1 = (endTime1 - startTime1);

		long startTime2 = System.nanoTime();
		test.solve2();
		long endTime2 = System.nanoTime();
		long duration2 = (endTime2 - startTime2);

		System.out.println("Solution = " + test.solve2());
		
		System.out.println("Brute force solution took this long: " + duration1 + " nanoSeconds");
		System.out.println("Second solution took this long: " + duration2 + " nanoSeconds");
	}

	public String solve(){
		// For initial even terms
		int sum = 0;
		int initialValue = 1;
		int nextValue = 1;
		int count = 4000000;

		while(nextValue < count){
			if (nextValue%2 == 0){
				sum += nextValue;
			}
			nextValue += initialValue;
			initialValue = nextValue - initialValue;
			
		}

		return Integer.toString(sum);
	}

	// Since every third fibonacci number is even, the solution below avoids having to check whether a number is even.
	// This allows us to only do computations on every third fibinocci number.
	public String solve2(){
		int sum = 0;
		int initialValue = 1;
		int nextValue = 1;
		int thirdValue = initialValue + nextValue;
		int count = 4000000;

		while (thirdValue < count) {
			sum += thirdValue;
			initialValue = nextValue + thirdValue;
			nextValue = initialValue + thirdValue;
			thirdValue = nextValue + initialValue;
		}

		return Integer.toString(sum);
	}
}
















